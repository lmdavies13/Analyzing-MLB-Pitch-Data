---
title: "Analyzing MLB Pitch Trends"
format: html
editor: visual
---

Run 'quarto render 'Analyzing MLB Pitch Trends.qmd' --output-dir docs' to render docs

In this project we will analyze MLB pitch data from 2015-2018 to view trends in pitching performance using statistical analysis, predictive modeling, and classification techniques. Our goal is to develop models that predict variables like pitch speed while also implementing classification models to determine pitch type.This project will involve data cleaning, visualization, and model evaluation.

We will be using a dataset published on Kaggle titled “MLB Pitch Data (2015-2018),” which contains 8 different tables with information on pitches, at-bats, games, and players. Our focus will primarily be on the “pitches” table, which includes 2,867,154 pitch observations with 40 different attributes describing various aspects of each pitch. While most of the features are continuous variables measuring aspects like speed and rotation, categorical features such as pitch type provide opportunities for classification modeling. The dataset contains noise, including outlier pitches, missing values, and irrelevant features, which will require preprocessing before analysis. By leveraging this data, we aim to build predictive models to analyze pitch characteristics and gain deeper insights into pitching trends.

# Introduction

## Data 

## **Columns in the dataset:**

**Pitch Location & Movement**

-   **px** → x-location as pitch crosses the plate (X=0 means right down the middle).

-   **pz** → z-location as pitch crosses the plate (Z=0 means the ground).

-   **pfx_x** → Horizontal movement relative to a straight-line path (in inches).

-   **pfx_z** → Vertical movement relative to a straight-line path (in inches).

**Pitch Speed & Spin**

-   **start_speed** → Speed of the pitch just as it's thrown. (MPH?)

-   **end_speed** → Speed of the pitch when it reaches the plate. (MPH?)

-   **spin_rate** → The pitch's spin rate, measured in RPM (Revolutions Per Minute).

-   **spin_dir** → Direction in which the pitch is spinning, measured in degrees.

**Pitch Break & Acceleration**

-   **break_angle** → The angle at which the pitch breaks (measured in degrees).

-   **break_length** → The total distance the pitch moves due to breaking action (in inches).

-   **break_y** → The point along the y-axis where the pitch starts to break.

-   **ax** → Acceleration of the ball in the x-direction (ft/s²).

-   **ay** → Acceleration of the ball in the y-direction (ft/s²).

-   **az** → Acceleration of the ball in the z-direction (ft/s²).

**Strike Zone Boundaries**

-   **sz_bot** → Bottom of the batter’s strike zone (in feet).

-   **sz_top** → Top of the batter’s strike zone (in feet).

**Pitch Classification & Confidence**

-   **type_confidence** → Confidence in pitch classification (sometimes goes up to 2).

-   **pitch_type** → Type of pitch (e.g., FF = Four-Seam Fastball, SL = Slider).

**Velocity Components (Initial Conditions of the Pitch)**

-   **vx0** → Initial velocity of the pitch in the x-direction (ft/s).

-   **vy0** → Initial velocity of the pitch in the y-direction (ft/s).

-   **vz0** → Initial velocity of the pitch in the z-direction (ft/s).

-   **x0** → Initial x-position of the pitch at release (ft).

-   **y0** → Initial y-position of the pitch at release (ft).

-   **z0** → Initial z-position of the pitch at release (ft).

**Game Context & Results**

-   **x** → x-location of the pitch at the plate (similar to px).

-   **nasty** → A score representing how difficult the pitch was to hit (higher = harder).

-   **zone** → The strike zone region the pitch crossed (based on MLB zones).

    -   **Zones 1-9** Represent the area within the strike zone, encompassing the area over home plate between the batter's knees and the midpoint between their shoulders and the top of their uniform pants.

    -   **Zones 11-14** These zones represent pitches outside the strike zone, considered balls.

-   **code** → Records the result of the pitch (see dataset description for code meanings).

-   **type** → Simplified pitch result:

    -   "S" = Strike

    -   "B" = Ball

    -   "X" = In-play event (hit, out, etc.).

**Game and At-Bat Information**

-   **event_num** → Event number (useful for identifying game sequences like ejections).

-   **b_score** → Batter’s team score at the time of the pitch.

-   **ab_id** → At-bat ID (links with atbats.csv).

-   **b_count** → Number of balls in the current count.

-   **s_count** → Number of strikes in the current count.

-   **outs** → Number of outs (before pitch is thrown).

-   **pitch_num** → Pitch number within the current at-bat.

**Base Runners (On-Base Situation)**

-   **on_1b** → True if a runner is on first base, False if it is empty.

-   **on_2b** → True if a runner is on second base, False if it is empty.

-   **on_3b** → True is a runner is on third base, False if it is empty.

# Load the Dataset & Inspect Structure

## 1.1 Import Libraries

```{r}
install.packages("corrplot", repos = "https://cloud.r-project.org")
install.packages("tidyverse", repos = "https://cloud.r-project.org")
```

```{r}
library(tidyverse)
library(dplyr)
library(ggplot2)

```

#Loading and Read the dataset (CSV Format)

```{r}
data_file <- "pitches.csv"

pitch_df <- read_csv(data_file)
```

## 1.2 inspect structure of the dataset

```{r}
glimpse(pitch_df)
```

-   The data set has 2867154 Rows and 40 Columns

-   We can see the Column names and its data types

## 1.3 Categorizing Dataset Attributes (This is not completley finished)

-   Categorical:

    -    Zone(Ordinal)

    -   Code ()

    -   Type ()

    -   Pitch_type ()

    -   event_num ()

    -   ab_id ()

    -   on_1b

    -   on_2b ()

    -   on_3b ()

-   Continuous

    -   b_score ()

    -   start_speed ()

    -   end_speed ()

    -    spin_rate

    -   spin_dir

    -   break_angle

    -   break_length

    -   break_y

    -   ax

    -   ay

    -   az

    -   sz_bot

    -   sz_top

    -   type_confidence

    -   vx0,vy0,vz0

    -   x0, y0, z0

    -   x, y,

    -   pfx_x, pfx_z

    -   nasty

## 1.2 Identify the Questions the Analysis Aims to Answer:

-   How does pitch speed vary across different pitch types?

-   How does spin rate affect pitch outcome?

-   Do certain pitches produce certain pitching events (des)?

-   What is the most common pitch types used in different situations?

-   Do certain pitch tpyes lead to more "nasty" pitches, and what features most influence nastiness?

-   Does pitch effectiveness vary when runners are on base?

-   How consistent are pitch characteristic within a pitch type?

-   Do certain pitchs (types) consitently stay in certain zones?

## 0.0 Understanding variables – Handling Missing Values(Maybe move this to section 1.4)

#Check for duplicates (if any)

```{r}
pitch_df %>% distinct() %>% count()
```

## Looking into the Pitch Table (Understanding Variables)

Print the size of each table

```{r}
dim(pitch_df)
```

Take a look at the features

```{r}
str(pitch_df)
```

```{r}
summary(pitch_df)
```

EDA ( Exploratory Data Analysis)

Lets look at the categorical features and check their value counts

```{r}
table(pitch_df$pitch_type)
```

```{r}
table(pitch_df$type)
```

```{r}
table(pitch_df$code)
```

# 1.3 Compute Summary Statistics & Generate Basic Visualizations

```{r}
# Summary Statistics for key numeric columns
summary(pitch_df$spin_rate)
summary(pitch_df$start_speed)
```

### 1.3.1 Pitch Speed Distribution by Pitch Type

```{r}
library(ggplot2)

ggplot(pitch_df, aes(x=pitch_type, y= start_speed)) +
  geom_boxplot() +
  theme_minimal() +
  labs(title = "Pitch Speed Distribution by Pitch Type")
```

### 1.3.2 Distribution of Pitch Types

```{r}
ggplot(pitch_df, aes(x = pitch_type)) +
  geom_bar(fill = "steelblue") +
  theme_minimal() +
  labs(title = "Frequency of Different Pitch Types")
```

### 1.3.3 Distribution of Pitch Speeds

```{r}
ggplot(pitch_df, aes(x = start_speed)) +
  geom_density(fill = "blue", alpha = 0.5) +
  theme_minimal() +
  labs(title = "Density Plot of Pitch Speeds", x = "Pitch Speed (mph)", y = "Density")
```

Histograms for pitch speed, and spin rate

Interpretation:

-   This will show how frequently different speeds occur in the dataset.

-   Helps detect outliers (e.g. speeds that are to high or too low)

```{r}
ggplot(pitch_df, aes(x = start_speed)) +
  geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
  theme_minimal() +
  labs(title = "Distribution of Pitch Speeds", x = "Pitch Speed (mph)", y = "Count")

ggplot(pitch_df, aes(x = spin_rate)) +
  geom_histogram(binwidth = 50, fill = "darkorange", color = "black") +
  theme_minimal() +
  labs(title = "Distribution of Spin Rate", x = "Spin Rate (rpm)", y = "Count")
```

# 1. 4 Handling Missing Data

Check for missing values: find the NA's in each column

Check the number of NAs in each column

```{r}
# check for missing values
colSums(is.na(pitch_df))
```

Lets look and see what the percentage of NAs is per column

```{r}
# Check for the percentage of missing values 
colMeans(is.na(pitch_df)) * 100
```

### 1.4.1 Deciding how to handle these:

Due to the percentage of missing values being so small in the dataset, we will just remove them all without further investigation

```{r}
# Remove rows with missing values 
na_rows <- apply(is.na(pitch_df), 1, any)
pitch_df <- pitch_df[!na_rows, ]
sum(is.na(pitch_df))
```

# 1.5 Identify & Handling Outliers

Outliers in Pitch Speed (start)

-   Helps to compare speed distributions among different pitch types.

-   Shows the median speed for each pitch type.

-   Identifies outliers in specific pitches.

```{r}
ggplot(pitch_df, aes(y = start_speed)) +
  geom_boxplot(fill = "lightblue") +
  theme_minimal() +
  labs(title = "Boxplot of Pitch Speeds", y = "Pitch Speed (mph)")
```

```{# {r}
# ggplot(pitch_df, aes(y = start_speed)) +
#   geom_boxplot(fill = "lightblue") +
#   theme_minimal() +
#   labs(title = "Figure 1: Distribution of Pitch Start Speeds", y = "Pitch Starting Speed (mph)")
# 
# ggplot(pitch_df, aes(y = end_speed)) +
#   geom_boxplot(fill = "blue") +
#   theme_minimal() +
#   labs(title = "Figure 2: Distribution of Pitch End Speeds", y = "Pitch Ending Speed (mph)")
# 
# ggplot(pitch_df, aes(y = spin_rate)) +
#   geom_boxplot(fill = "pink") +
#   theme_minimal() +
#   labs(title = "Figure 3: Distribution of Spin Rate", y = "Spin Rate (???)")
# 
# 
# ggplot(pitch_df, aes(y = pitch_type)) +
#   geom_boxplot(fill = "yellow") +
#   theme_minimal() +
#   labs(title = "Figure 4: Distribution of Pitch Type", y = "Pitch_Type (???)")
# 
# ggplot(pitch_df, aes(y = type)) +
#   geom_boxplot(fill = "lightgreen") +
#   theme_minimal() +
#   labs(title = "Figure 4: Distribution of Type", y = "Type (???)")
# 
# ggplot(pitch_df, aes(y = zone)) +
#   geom_boxplot(fill = "orange") +
#   theme_minimal() +
#   labs(title = "Figure 4: Distribution of Zone", y = "Zone (1-14)")

```

#For each Figure# list what found for outliers–

(Ignore for the moment)

```{r}
#Detect outliers using IQR method

#Q1 <- quantile(pitch_df$start_speed, 0.25, na.rm = TRUE)
#Q3 <- quantile(pitch_df$start_speed, 0.75, na.rm = TRUE) IQR <- #Q3 - Q1

#Define lower and upper bounds

#lower_bound <- Q1 - 1.5 * IQR upper_bound <- Q3 + 1.5 * IQR

#Filter out extreme outliers

#pitch_df_clean <- pitch_df %>% filter(start_speed >= lower_bound & start_speed <= upper_bound)


```

# 1.6 Normalize or Scale Numerical Features (If Needed) - NO?

# Week: 2&3 EDA

# 2.1 Performed EDA: 

## Identify Trends, Correlations, and potenital data issues. 

# 2.2 Informative Plots:

## Scatter plots, correlation matrices, time-series plots, (to uncover patterns)

Correlation Analysis - Checking relationships between numerical variables (e.g. pitch speed, spin rate, movement)

We will create a correlation matrix among all numeric variables

```{r}
library(corrplot)

numeric_vars <- sapply(pitch_df, is.numeric)
numeric_data <- pitch_df[, numeric_vars]

corr_mat <- cor(numeric_data)

corrplot(
  corr_mat,
  method = "circle",
  type = "upper",
  order = "hclust", #hierachical clustering of vars
  tl.col = "black", #text color
  tl.cex = 0.7, # text size
  tl.srt = 45, #rotation
  col = colorRampPalette(c("navy", "white", "firebrick3"))(200) #Set a palette
)
  
```

-   Identifies relationships between variables (e.g., **higher spin rates often lead to more movement**).

<!-- -->

-    Helps in **feature selection** for later predictive modeling.

### 2.2.2 Identify trends using scatterplots - check how spin rate affects pitch speed and how break length impacts movement

a\) Spin Rate vs. Start Speed

```{r}
ggplot(pitch_df, aes(x = spin_rate, y = start_speed)) +
  geom_point(alpha = 0.5, color = "lightblue") +
  geom_smooth(method = "lm", color = "red") +
  labs(title = "Spin Rate vs. Pitch Speeds", x = "Spin Rate(RPM)", y = "Start Speed (mph)") +
  theme_minimal()
```

Interpretation:

-   Does spin rate affect pitch speed?

-   Red line shows the trend (higher spin rate could correlate with certain pitch speeds)

b\) Pitch break Length vs. movement (horizontal & vertical)

```{r}
ggplot(pitch_df, aes(x = break_length, y = pfx_x)) + 
  geom_point(alpha = 0.5, color = "green") +
  geom_smooth(method = "lm", color = "red") +
  labs(title = "Break Length vs Horizontal Movement", x = "Break Length", y = "Horizontal Movement (pfx_x)") +
  theme_minimal()
```

Interpretation:

-   Determine if longer breaking pitches have more movement?

-   Helps in understanding pitch effectiveness.

# 2.3 Interactive Dashboards using Shiny:

# 2.4 Engineered new features: 

## Categorical groupings, time based segments/ trends.

a\) Categorizing Pitch Speed

```{r}
pitch_df$speed_category <- cut(pitch_df$start_speed, 
                              breaks = c(0, 85, 95, 110), 
                              labels = c("Slow", "Medium", "Fast"))
```

This helps in grouping pitches based on speed for better analysis.

b\) Calculating Pitch speed differences (Start vs. End)

```{r}
pitch_df$speed_drop <- pitch_df$start_speed - pitch_df$end_speed
```

This measures **how much the pitch slows down**, which can indicate pitch effectiveness.

# 2.5 Apply techniques: 

## Normalization, encoding, categorical variables. 

# 2.6 Study the findings and refine the project direction is needed. 

# Week 4: Predictive Modeling

4.1 Split the data into training and testing sets

4.2 Implement Simple predictive models (linear regression for continuous outcomes, logistic regression for classifications) as a baseline

4.3 Experiment with a variety of models (desision trees, random forests, SVM) depending on the projects goals.

4.4 Train models on the training set and validate usingn the validation set.

# Week 5: Model Evaluation & Refinement

5.1 Evaluate models using appr. metrics

5.2 Optimize the best-performing models with grid search or other tuning methods

5.3 Develop clear visualizations of model performance and key insights.

# Week 6: Automation & Reporting: 

6.1 Use quarto to creat a dynamic, reproducible report summarizing the project findings

6.2 Build interactive Shiny app showcasing the dashboard and prediction

# Week 7: Presentation  & Final Delivery

7.1 Finalize/Compile

7.2 Prepare presentation
